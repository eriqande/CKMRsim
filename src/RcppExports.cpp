// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// make_matrix_X_l
NumericMatrix make_matrix_X_l(NumericVector p, NumericVector kappa);
RcppExport SEXP _CKMRsim_make_matrix_X_l(SEXP pSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_matrix_X_l(p, kappa));
    return rcpp_result_gen;
END_RCPP
}
// comp_ind_pairwise
DataFrame comp_ind_pairwise(IntegerMatrix S, IntegerMatrix T, int t, NumericVector values, IntegerVector nGenos, IntegerVector Starts);
RcppExport SEXP _CKMRsim_comp_ind_pairwise(SEXP SSEXP, SEXP TSEXP, SEXP tSEXP, SEXP valuesSEXP, SEXP nGenosSEXP, SEXP StartsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nGenos(nGenosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Starts(StartsSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_ind_pairwise(S, T, t, values, nGenos, Starts));
    return rcpp_result_gen;
END_RCPP
}
// locus_specific_pairwise
DataFrame locus_specific_pairwise(IntegerMatrix S, IntegerMatrix T, IntegerVector s, IntegerVector t, NumericVector values, IntegerVector nGenos, IntegerVector Starts);
RcppExport SEXP _CKMRsim_locus_specific_pairwise(SEXP SSEXP, SEXP TSEXP, SEXP sSEXP, SEXP tSEXP, SEXP valuesSEXP, SEXP nGenosSEXP, SEXP StartsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nGenos(nGenosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Starts(StartsSEXP);
    rcpp_result_gen = Rcpp::wrap(locus_specific_pairwise(S, T, s, t, values, nGenos, Starts));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_geno_id
DataFrame pairwise_geno_id(IntegerMatrix S, int max_miss);
RcppExport SEXP _CKMRsim_pairwise_geno_id(SEXP SSEXP, SEXP max_missSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type max_miss(max_missSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_geno_id(S, max_miss));
    return rcpp_result_gen;
END_RCPP
}
// read_mendel_outped
List read_mendel_outped(CharacterVector Input, IntegerVector NumA, int verbose);
RcppExport SEXP _CKMRsim_read_mendel_outped(SEXP InputSEXP, SEXP NumASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Input(InputSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NumA(NumASEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(read_mendel_outped(Input, NumA, verbose));
    return rcpp_result_gen;
END_RCPP
}
// samp_from_mat
IntegerVector samp_from_mat(NumericMatrix M);
RcppExport SEXP _CKMRsim_samp_from_mat(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(samp_from_mat(M));
    return rcpp_result_gen;
END_RCPP
}
// top_index
IntegerVector top_index(SEXP x, int n);
RcppExport SEXP _CKMRsim_top_index(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(top_index(x, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CKMRsim_make_matrix_X_l", (DL_FUNC) &_CKMRsim_make_matrix_X_l, 2},
    {"_CKMRsim_comp_ind_pairwise", (DL_FUNC) &_CKMRsim_comp_ind_pairwise, 6},
    {"_CKMRsim_locus_specific_pairwise", (DL_FUNC) &_CKMRsim_locus_specific_pairwise, 7},
    {"_CKMRsim_pairwise_geno_id", (DL_FUNC) &_CKMRsim_pairwise_geno_id, 2},
    {"_CKMRsim_read_mendel_outped", (DL_FUNC) &_CKMRsim_read_mendel_outped, 3},
    {"_CKMRsim_samp_from_mat", (DL_FUNC) &_CKMRsim_samp_from_mat, 1},
    {"_CKMRsim_top_index", (DL_FUNC) &_CKMRsim_top_index, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CKMRsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
